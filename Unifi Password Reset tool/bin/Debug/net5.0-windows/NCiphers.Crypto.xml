<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NCiphers.Crypto</name>
    </assembly>
    <members>
        <member name="T:NCiphers.Ciphers.AES">
            <summary>
            Provides AES encryption/decryption methods
            </summary>
            <remarks>
            Can use keys with 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.BaseCipher.AcceptedKeySizes">
            <summary>
            The key sizes in bytes length accepted by this algorithm
            </summary>
            <returns>key sizes in bytes length accepted by this algorithm</returns>
        </member>
        <member name="M:NCiphers.Ciphers.BaseCipher.AcceptedKeySizesInBits">
            <summary>
            The key sizes in bits length accepted by this algorithm
            </summary>
            <returns>key sizes in bits length accepted by this algorithm</returns>
        </member>
        <member name="M:NCiphers.Ciphers.BaseCipher.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes length
            </summary>
            <returns>the minimal accepted key size in bytes length</returns>
        </member>
        <member name="M:NCiphers.Ciphers.BaseCipher.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes length
            </summary>
            <returns>the maximum accepted key size in bytes length</returns>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.KeySize">
            <summary>
            Key size of this algorithm in bits
            </summary>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.BlockSize">
            <summary>
            Block size of this algorithm in bits
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.Padding">
            <summary>
            Padding mode that wil be used for encryption/decryption
            </summary>
            <remarks>
            Default is PKCS-7
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.Mode">
            <summary>
            Block mode used for encryption/decryption
            </summary>
            <remarks>
            When we decrypt data, we must know upfront what was the block mode used when it was encrypted and set it explicitly.
            <para>
            Default is CBC
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.PasswordHashFunction">
            <summary>
            Hash function used for transforming String passwords into byte array keys
            </summary>
            <remarks>
            <para>
            Default is SHA256
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.BaseCipher.CustomPaddinglmplementation">
            <summary>
            Custom padding used when <see cref="P:NCiphers.Ciphers.BaseCipher.Padding"/> is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.CustomPadding"/>
            </summary>
        </member>
        <member name="T:NCiphers.Ciphers.ICipher">
            <summary>
            General Intreface for the symmetric cipher encryption algorithms
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes
            </summary>
            <returns>the minimal accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes
            </summary>
            <returns>the maximum accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="data">byte array to be decrypted</param>
            <param name="key">Key as byte array</param>
            <returns>the byte array encrypted</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="data">byte array to be decrypted</param>
            <param name="key">Key as byte array</param>
            <param name="IV">Initialization vector (IV) for the encryption.</param>
            <returns>the byte array encrypted</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptBytes(System.Byte[],System.String)">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="data">byte array to be decrypted</param>
            <param name="password">a password that will be converted to key</param>
            <returns>the byte array encrypted</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            Encrypts a byte array
            </summary>
            <param name="data">data to be encrypted</param>
            <param name="password">a password that will be converted to key</param>
            <param name="IV">Initialization vector (IV) for the encryption.</param>
            <returns>the byte array encrypted</returns>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output encrypted file</param>
            <param name="key">key as byte array</param>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output encrypted file</param>
            <param name="key">key as byte array.</param>
            <param name="IV">Initialization vector (IV) for the encryption.</param>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output encrypted file</param>
            <param name="password">a password that will be converted to key</param>
        </member>
        <member name="M:NCiphers.Ciphers.ICipher.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output encrypted file</param>
            <param name="password">a password that will be converted to key</param>
            <param name="IV">Initialization vector (IV) for the encryption.</param>
        </member>
        <member name="M:NCiphers.Ciphers.AES.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.AES.#ctor(NCiphers.Ciphers.CipherBlockMode,System.Int32)">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptString(System.String,System.String)">
            <summary>
            AES encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded AES encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            AES encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded AES encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be AES.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be AES.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="!:BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptString(System.String,System.Byte[])">
            <summary>
            AES encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded AES encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            AES encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded AES encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="!:BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            AES encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output AES encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), password);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), password)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            AES encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output AES encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), password, IV);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), password, IV)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            AES encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output AES encrypted file</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), key);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), key)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            AES encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output AES encrypted file</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), key);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), key, IV)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="!:BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             AES encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             AES encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             AES encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             AES encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // a password that will be converted to byte array key using the hash function
                     // from AES.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from AES.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptBytes(System.Byte[],System.String)">
             <summary>
             AES encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             <returns>the byte array AES encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from AES.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from AES.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             AES encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array AES encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             AES encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
             <returns>the byte array AES encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="!:BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             AES encrypts a byte array
             </summary>
             <param name="data">data to be AES encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
             <returns>the byte array AES encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // a password that will be converted to byte array key using the hash function
                     // from AES.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from AES.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="!:BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="!:BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an AES encrypted file
            </summary>
            <param name="file">AES encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), key);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), key)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an AES encrypted file
            </summary>
            <param name="file">AES encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an AES encrypted file
            </summary>
            <param name="file">AES encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), password);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), password)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an AES encrypted file
            </summary>
            <param name="file">AES encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    aes.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.aes"), password, IV);
                    
                    // decrypting
                    aes.DecryptFile(new FileInfo(@"Data\SampleFile.aes"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    aes.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.aes"), password, IV)
                    
                    ' decrypting
                    aes.DecryptFile(New FileInfo("Data\SampleFile.aes"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an AES encrypted stream
             </summary>
             <param name="encryptedStream">AES encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">AES key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an AES encrypted stream
            </summary>
            <param name="encryptedStream">AES encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">AES key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an AES encrypted stream
             </summary>
             <param name="encryptedStream">AES encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an AES encrypted stream
             </summary>
             <param name="encryptedStream">AES encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // a password that will be converted to byte array key using the hash function
                     // from AES.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.aes"))
                     {
                       aes.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.aes"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         aes.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from AES.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.aes")
                             aes.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.aes")
                         Using decryptedStream As Stream = New MemoryStream()
                             aes.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an AES encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">AES encrypted and Base64/MIME converted string</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an AES encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">AES encrypted and Base64/MIME converted string</param>
            <param name="key">AES key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    // 16 bytes long key for AES-128 bit encryption
                    // for AES-192 the key must be 24 bytes long
                    // for AES-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' 16 bytes long key for AES-128 bit encryption
                    ' for AES-192 the key must be 24 bytes long
                    ' for AES-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an AES encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">AES encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an AES encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">AES encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class AES_Demo
            {
                public static void Main(string[] args)
                {
                    AES aes = new AES();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from AES.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be AES.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = aes.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = aes.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class AES_Demo
                Public Shared Sub Execute()
                    Dim aes As New AES()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from AES.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be AES.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = aes.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = aes.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an AES encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an AES encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     // 16 bytes long key for AES-128 bit encryption
                     // for AES-192 the key must be 24 bytes long
                     // for AES-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' 16 bytes long key for AES-128 bit encryption
                     ' for AES-192 the key must be 24 bytes long
                     ' for AES-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an AES encrypted byte array
             </summary>
             <param name="encryptedData">AES encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class AES_Demo
             {
                 public static void Main(string[] args)
                 {
                     AES aes = new AES();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from AES.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = aes.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = aes.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class AES_Demo
                 Public Shared Sub Execute()
                     Dim aes As New AES()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from AES.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = aes.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = aes.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.AES.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an AES encrypted byte array
            </summary>
            <param name="encryptedData">AES encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:AES.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="!:BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.AES.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.AES.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Ciphers.Blowfish">
            <summary>
            Provides Blowfish encryption/decryption methods
            </summary>
            <remarks>
            Can use keys ranging from 4 bytes (32 bits) up to 56 bytes (448 bits)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes
            </summary>
            <returns>the minimal accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes
            </summary>
            <returns>the maximum accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptString(System.String,System.String)">
            <summary>
            Blowfish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Blowfish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptString(System.String,System.String,System.String)">
            <summary>
            Blowfish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Blowfish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    string salt = "$2y$";
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password, salt);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password, salt);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
                    
                    Dim salt As String = "$2y$"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password, salt)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password, salt)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Blowfish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Blowfish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Blowfish.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Blowfish.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptString(System.String,System.Byte[])">
            <summary>
            Blowfish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Blowfish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Blowfish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Blowfish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Blowfish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Blowfish encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), password);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), password)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Blowfish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Blowfish encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), password, IV);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), password, IV)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Blowfish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Blowfish encrypted file</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), key);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), key)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Blowfish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Blowfish encrypted file</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), key);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), key, IV)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Blowfish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Blowfish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Blowfish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Blowfish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // a password that will be converted to byte array key using the hash function
                     // from Blowfish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Blowfish.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Blowfish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             <returns>the byte array Blowfish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Blowfish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Blowfish.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Blowfish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Blowfish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Blowfish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
             <returns>the byte array Blowfish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Blowfish encrypts a byte array
             </summary>
             <param name="data">data to be Blowfish encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
             <returns>the byte array Blowfish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // a password that will be converted to byte array key using the hash function
                     // from Blowfish.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Blowfish.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted file
            </summary>
            <param name="file">Blowfish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), key);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), key)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted file
            </summary>
            <param name="file">Blowfish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Blowfish encrypted file
            </summary>
            <param name="file">Blowfish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), password);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), password)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted file
            </summary>
            <param name="file">Blowfish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Blowfish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Blowfish"), password, IV);
                    
                    // decrypting
                    Blowfish.DecryptFile(new FileInfo(@"Data\SampleFile.Blowfish"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Blowfish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Blowfish"), password, IV)
                    
                    ' decrypting
                    Blowfish.DecryptFile(New FileInfo("Data\SampleFile.Blowfish"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Blowfish encrypted stream
             </summary>
             <param name="encryptedStream">Blowfish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Blowfish key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted stream
            </summary>
            <param name="encryptedStream">Blowfish encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Blowfish key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Blowfish encrypted stream
             </summary>
             <param name="encryptedStream">Blowfish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Blowfish encrypted stream
             </summary>
             <param name="encryptedStream">Blowfish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // a password that will be converted to byte array key using the hash function
                     // from Blowfish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Blowfish"))
                     {
                       Blowfish.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Blowfish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Blowfish.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Blowfish.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Blowfish")
                             Blowfish.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Blowfish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Blowfish.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Blowfish encrypted and Base64/MIME converted string</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Blowfish encrypted and Base64/MIME converted string</param>
            <param name="key">Blowfish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    // 16 bytes long key for Blowfish-128 bit encryption
                    // for Blowfish-192 the key must be 24 bytes long
                    // for Blowfish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' 16 bytes long key for Blowfish-128 bit encryption
                    ' for Blowfish-192 the key must be 24 bytes long
                    ' for Blowfish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Blowfish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Blowfish encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptString(System.String,System.String,System.String)">
            <summary>
            Decrypts an Blowfish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Blowfish encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Blowfish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Blowfish encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Blowfish_Demo
            {
                public static void Main(string[] args)
                {
                    Blowfish Blowfish = new Blowfish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Blowfish.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Blowfish.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Blowfish.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Blowfish.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Blowfish_Demo
                Public Shared Sub Execute()
                    Dim Blowfish As New Blowfish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Blowfish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Blowfish.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Blowfish.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Blowfish.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Blowfish encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Blowfish encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     // 16 bytes long key for Blowfish-128 bit encryption
                     // for Blowfish-192 the key must be 24 bytes long
                     // for Blowfish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' 16 bytes long key for Blowfish-128 bit encryption
                     ' for Blowfish-192 the key must be 24 bytes long
                     ' for Blowfish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Blowfish encrypted byte array
             </summary>
             <param name="encryptedData">Blowfish encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Blowfish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Blowfish Blowfish = new Blowfish();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Blowfish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Blowfish.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Blowfish.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Blowfish_Demo
                 Public Shared Sub Execute()
                     Dim Blowfish As New Blowfish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Blowfish.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Blowfish.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Blowfish.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Blowfish.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Blowfish encrypted byte array
            </summary>
            <param name="encryptedData">Blowfish encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Blowfish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Blowfish.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Blowfish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Blowfish.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Blowfish.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Ciphers.Cast5">
            <summary>
            Provides Cast5 encryption/decryption methods
            </summary>
            <remarks>
            Can use keys ranging from 5 bytes (40 bits) up to 16 bytes (128 bits)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes
            </summary>
            <returns>the minimal accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes
            </summary>
            <returns>the maximum accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptString(System.String,System.String)">
            <summary>
            Cast5 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Cast5 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Cast5 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Cast5 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Cast5.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Cast5.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptString(System.String,System.Byte[])">
            <summary>
            Cast5 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Cast5 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Cast5 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Cast5 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Cast5 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast5 encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), password);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), password)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Cast5 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast5 encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), password, IV);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), password, IV)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Cast5 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast5 encrypted file</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), key);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), key)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Cast5 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast5 encrypted file</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), key);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), key, IV)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Cast5 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Cast5 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Cast5 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Cast5 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast5.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast5.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Cast5 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             <returns>the byte array Cast5 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Cast5.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast5.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Cast5 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Cast5 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Cast5 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
             <returns>the byte array Cast5 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Cast5 encrypts a byte array
             </summary>
             <param name="data">data to be Cast5 encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
             <returns>the byte array Cast5 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast5.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast5.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted file
            </summary>
            <param name="file">Cast5 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), key);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), key)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted file
            </summary>
            <param name="file">Cast5 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Cast5 encrypted file
            </summary>
            <param name="file">Cast5 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), password);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), password)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted file
            </summary>
            <param name="file">Cast5 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast5.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast5"), password, IV);
                    
                    // decrypting
                    Cast5.DecryptFile(new FileInfo(@"Data\SampleFile.Cast5"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast5.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast5"), password, IV)
                    
                    ' decrypting
                    Cast5.DecryptFile(New FileInfo("Data\SampleFile.Cast5"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Cast5 encrypted stream
             </summary>
             <param name="encryptedStream">Cast5 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Cast5 key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted stream
            </summary>
            <param name="encryptedStream">Cast5 encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Cast5 key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Cast5 encrypted stream
             </summary>
             <param name="encryptedStream">Cast5 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Cast5 encrypted stream
             </summary>
             <param name="encryptedStream">Cast5 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast5.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast5"))
                     {
                       Cast5.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast5"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast5.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast5.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast5")
                             Cast5.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast5")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast5.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast5 encrypted and Base64/MIME converted string</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast5 encrypted and Base64/MIME converted string</param>
            <param name="key">Cast5 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    // 16 bytes long key for Cast5-128 bit encryption
                    // for Cast5-192 the key must be 24 bytes long
                    // for Cast5-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' 16 bytes long key for Cast5-128 bit encryption
                    ' for Cast5-192 the key must be 24 bytes long
                    ' for Cast5-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Cast5 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast5 encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Cast5 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast5 encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast5_Demo
            {
                public static void Main(string[] args)
                {
                    Cast5 Cast5 = new Cast5();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast5.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Cast5.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Cast5.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast5.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast5_Demo
                Public Shared Sub Execute()
                    Dim Cast5 As New Cast5()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast5.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Cast5.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast5.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast5.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Cast5 encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Cast5 encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     // 16 bytes long key for Cast5-128 bit encryption
                     // for Cast5-192 the key must be 24 bytes long
                     // for Cast5-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' 16 bytes long key for Cast5-128 bit encryption
                     ' for Cast5-192 the key must be 24 bytes long
                     ' for Cast5-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Cast5 encrypted byte array
             </summary>
             <param name="encryptedData">Cast5 encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast5_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast5 Cast5 = new Cast5();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Cast5.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast5.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Cast5.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast5_Demo
                 Public Shared Sub Execute()
                     Dim Cast5 As New Cast5()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast5.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast5.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Cast5.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast5.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Cast5 encrypted byte array
            </summary>
            <param name="encryptedData">Cast5 encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast5.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast5.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast5.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Cast5.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Cast5.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Ciphers.Cast6">
            <summary>
            Provides Cast6 encryption/decryption methods
            </summary>
            <remarks>
            Can use keys ranging from 16 bytes (128 bits) up to 32 bytes (256 bits)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes
            </summary>
            <returns>the minimal accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes
            </summary>
            <returns>the maximum accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptString(System.String,System.String)">
            <summary>
            Cast6 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Cast6 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Cast6 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Cast6 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Cast6.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Cast6.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptString(System.String,System.Byte[])">
            <summary>
            Cast6 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Cast6 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Cast6 encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Cast6 encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Cast6 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast6 encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), password);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), password)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Cast6 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast6 encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), password, IV);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), password, IV)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Cast6 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast6 encrypted file</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), key);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), key)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Cast6 encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Cast6 encrypted file</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), key);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), key, IV)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Cast6 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Cast6 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Cast6 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Cast6 encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast6.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast6.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Cast6 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             <returns>the byte array Cast6 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Cast6.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast6.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Cast6 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Cast6 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Cast6 encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
             <returns>the byte array Cast6 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Cast6 encrypts a byte array
             </summary>
             <param name="data">data to be Cast6 encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
             <returns>the byte array Cast6 encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast6.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast6.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted file
            </summary>
            <param name="file">Cast6 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), key);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), key)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted file
            </summary>
            <param name="file">Cast6 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Cast6 encrypted file
            </summary>
            <param name="file">Cast6 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), password);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), password)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted file
            </summary>
            <param name="file">Cast6 encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Cast6.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Cast6"), password, IV);
                    
                    // decrypting
                    Cast6.DecryptFile(new FileInfo(@"Data\SampleFile.Cast6"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Cast6.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Cast6"), password, IV)
                    
                    ' decrypting
                    Cast6.DecryptFile(New FileInfo("Data\SampleFile.Cast6"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Cast6 encrypted stream
             </summary>
             <param name="encryptedStream">Cast6 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Cast6 key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted stream
            </summary>
            <param name="encryptedStream">Cast6 encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Cast6 key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Cast6 encrypted stream
             </summary>
             <param name="encryptedStream">Cast6 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Cast6 encrypted stream
             </summary>
             <param name="encryptedStream">Cast6 encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // a password that will be converted to byte array key using the hash function
                     // from Cast6.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Cast6"))
                     {
                       Cast6.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Cast6"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Cast6.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast6.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Cast6")
                             Cast6.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Cast6")
                         Using decryptedStream As Stream = New MemoryStream()
                             Cast6.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast6 encrypted and Base64/MIME converted string</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast6 encrypted and Base64/MIME converted string</param>
            <param name="key">Cast6 key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    // 16 bytes long key for Cast6-128 bit encryption
                    // for Cast6-192 the key must be 24 bytes long
                    // for Cast6-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' 16 bytes long key for Cast6-128 bit encryption
                    ' for Cast6-192 the key must be 24 bytes long
                    ' for Cast6-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Cast6 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast6 encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Cast6 encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Cast6 encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Cast6_Demo
            {
                public static void Main(string[] args)
                {
                    Cast6 Cast6 = new Cast6();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Cast6.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Cast6.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Cast6.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Cast6.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Cast6_Demo
                Public Shared Sub Execute()
                    Dim Cast6 As New Cast6()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Cast6.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Cast6.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Cast6.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Cast6.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Cast6 encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Cast6 encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     // 16 bytes long key for Cast6-128 bit encryption
                     // for Cast6-192 the key must be 24 bytes long
                     // for Cast6-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' 16 bytes long key for Cast6-128 bit encryption
                     ' for Cast6-192 the key must be 24 bytes long
                     ' for Cast6-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Cast6 encrypted byte array
             </summary>
             <param name="encryptedData">Cast6 encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Cast6_Demo
             {
                 public static void Main(string[] args)
                 {
                     Cast6 Cast6 = new Cast6();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Cast6.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Cast6.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Cast6.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Cast6_Demo
                 Public Shared Sub Execute()
                     Dim Cast6 As New Cast6()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Cast6.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Cast6.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Cast6.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Cast6.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Cast6 encrypted byte array
            </summary>
            <param name="encryptedData">Cast6 encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Cast6.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Cast6.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Cast6.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Cast6.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Cast6.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.ECB">
            <summary>
            Electronic CodeBook mode (each block of the data is processed independently)
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.CBC">
            <summary>
            Cipher Block Chaining
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.CFB">
            <summary>
            Cipher Feedback Mode
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.CTR">
            <summary>
            Counter mode, also known as SIC (Segmented Integer Counter) mode. Specified in RFC 3686
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.CTS">
            <summary>
            Cipher Text Stealing
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.OFB">
            <summary>
            Output Feedback Mode
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.OPENPGPCFB">
            <summary>
            Variation on CFB mode defined in OpenPGP (RFC 4880)
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.SIC">
            <summary>
            Segmented Integer Counter (SIC)
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherBlockMode.GOFB">
            <summary>
            OFB mode for use with the GOST-28147 encryption algorithm
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding">
            <summary>
            No padding is performed and data is passed as is.
            </summary>
            <remarks>
            The data size must be aligned with the algorithm BlockSize, or an exception will be raised
            </remarks>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.Pkcs5">
            <summary>
            Padding mechanism defined in PKCS #5
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.Pkcs7">
            <summary>
            Padding mechanism defined in PKCS #7
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.ISO10126">
            <summary>
            Padding mechanism defined in ISO 10126-2
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.ISO7816">
            <summary>
            Padding mechanism defined in ISO 7816-4
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.ISO9797">
            <summary>
            Padding mechanism defined in ISO 7816-4 (same as <see cref="F:NCiphers.Ciphers.CipherPaddingMode.ISO7816"/>)
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.Tbc">
            <summary>
            Trailing Bit Complement padding
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.ANSIX923">
            <summary>
            Padding mechanism defined in X9.23
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.Zeros">
            <summary>
            Padding with zero bytes (not recommended)
            </summary>
        </member>
        <member name="F:NCiphers.Ciphers.CipherPaddingMode.CustomPadding">
            <summary>
            Custom padding method
            </summary>
        </member>
        <member name="T:NCiphers.Ciphers.Des">
            <summary>
            Provides DES (Data Encryption Standard) encryption/decryption methods
            </summary>
            <remarks>
            Uses 7 byte (56 bit) keys
            <pre>
            DES is now considered to be insecure for many applications!
            </pre>
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Des.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptString(System.String,System.String)">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptString(System.String,System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password, IV);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">data to be Des encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Des.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password, IV);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Des key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted stream
            </summary>
            <param name="encryptedStream">Des encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Des key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">Des encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Des.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Des encrypted byte array
            </summary>
            <param name="encryptedData">Des encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Des.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Des.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Des.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Des.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Ciphers.Idea">
            <summary>
            Provides IDEA (International Data Encryption Algorithm) encryption/decryption methods
            </summary>
            <remarks>
            Can use keys ranging from 5 bytes (40 bits) up to 16 bytes (128 bits)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptString(System.String,System.String)">
            <summary>
            Idea encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Idea encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Idea encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Idea encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Idea.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Idea.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptString(System.String,System.Byte[])">
            <summary>
            Idea encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Idea encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Idea encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="P:NCiphers.Ciphers.Idea.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Idea encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Idea encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Idea encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), password);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), password)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Idea encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Idea encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), password, IV);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), password, IV)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Idea encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Idea encrypted file</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), key);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), key)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Idea encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Idea encrypted file</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), key);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), key, IV)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Idea encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Idea encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Idea encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Idea encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // a password that will be converted to byte array key using the hash function
                     // from Idea.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Idea.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Idea encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             <returns>the byte array Idea encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Idea.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Idea.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Idea encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Idea encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Idea encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
             <returns>the byte array Idea encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Idea encrypts a byte array
             </summary>
             <param name="data">data to be Idea encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
             <returns>the byte array Idea encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // a password that will be converted to byte array key using the hash function
                     // from Idea.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Idea.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Idea encrypted file
            </summary>
            <param name="file">Idea encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), key);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), key)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Idea encrypted file
            </summary>
            <param name="file">Idea encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Idea encrypted file
            </summary>
            <param name="file">Idea encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), password);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), password)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Idea encrypted file
            </summary>
            <param name="file">Idea encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Idea.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Idea"), password, IV);
                    
                    // decrypting
                    Idea.DecryptFile(new FileInfo(@"Data\SampleFile.Idea"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Idea.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Idea"), password, IV)
                    
                    ' decrypting
                    Idea.DecryptFile(New FileInfo("Data\SampleFile.Idea"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Idea encrypted stream
             </summary>
             <param name="encryptedStream">Idea encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Idea key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Idea encrypted stream
            </summary>
            <param name="encryptedStream">Idea encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Idea key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Idea encrypted stream
             </summary>
             <param name="encryptedStream">Idea encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Idea encrypted stream
             </summary>
             <param name="encryptedStream">Idea encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // a password that will be converted to byte array key using the hash function
                     // from Idea.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Idea"))
                     {
                       Idea.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Idea"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Idea.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Idea.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Idea")
                             Idea.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Idea")
                         Using decryptedStream As Stream = New MemoryStream()
                             Idea.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Idea encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Idea encrypted and Base64/MIME converted string</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Idea encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Idea encrypted and Base64/MIME converted string</param>
            <param name="key">Idea key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    // 16 bytes long key for Idea-128 bit encryption
                    // for Idea-192 the key must be 24 bytes long
                    // for Idea-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' 16 bytes long key for Idea-128 bit encryption
                    ' for Idea-192 the key must be 24 bytes long
                    ' for Idea-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Idea encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Idea encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Idea encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Idea encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Idea_Demo
            {
                public static void Main(string[] args)
                {
                    Idea Idea = new Idea();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Idea.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Idea.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Idea.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Idea.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Idea_Demo
                Public Shared Sub Execute()
                    Dim Idea As New Idea()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Idea.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Idea.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Idea.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Idea.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Idea encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Idea encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     // 16 bytes long key for Idea-128 bit encryption
                     // for Idea-192 the key must be 24 bytes long
                     // for Idea-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' 16 bytes long key for Idea-128 bit encryption
                     ' for Idea-192 the key must be 24 bytes long
                     ' for Idea-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Idea encrypted byte array
             </summary>
             <param name="encryptedData">Idea encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Idea_Demo
             {
                 public static void Main(string[] args)
                 {
                     Idea Idea = new Idea();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Idea.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Idea.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Idea.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Idea_Demo
                 Public Shared Sub Execute()
                     Dim Idea As New Idea()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Idea.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Idea.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Idea.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Idea.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Idea encrypted byte array
            </summary>
            <param name="encryptedData">Idea encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Idea.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Idea.StrictKeys"/> is true and the output of the <see cref="P:NCiphers.Ciphers.Idea.PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Idea.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Idea.Padding">
            <summary>
            Padding mode that wil be used for encryption/decryption
            </summary>
            <remarks>
            Default is PKCS-7
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Idea.Mode">
            <summary>
            Block mode used for encryption/decryption
            </summary>
            <remarks>
            When we decrypt data, we must know upfront what was the block mode used when it was encrypted and set it explicitly.
            <para>
            Default is CBC
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Idea.PasswordHashFunction">
            <summary>
            Hash function used for transforming String passwords into byte array keys
            </summary>
            <remarks>
            <para>
            Default is SHA256
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Idea.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptString(System.String,System.String)">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptString(System.String,System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Des encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Des encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password, IV);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Des encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Des encrypted file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Des encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Des encrypts a byte array
             </summary>
             <param name="data">data to be Des encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
             <returns>the byte array Des encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), key);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), key)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted file
            </summary>
            <param name="file">Des encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Des.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Des"), password, IV);
                    
                    // decrypting
                    Des.DecryptFile(new FileInfo(@"Data\SampleFile.Des"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Des.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Des"), password, IV)
                    
                    ' decrypting
                    Des.DecryptFile(New FileInfo("Data\SampleFile.Des"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Des key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted stream
            </summary>
            <param name="encryptedStream">Des encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Des key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Des encrypted stream
             </summary>
             <param name="encryptedStream">Des encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Des"))
                     {
                       Des.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Des"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Des.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Des")
                             Des.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Des")
                         Using decryptedStream As Stream = New MemoryStream()
                             Des.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="key">Des key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    // 16 bytes long key for Des-128 bit encryption
                    // for Des-192 the key must be 24 bytes long
                    // for Des-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' 16 bytes long key for Des-128 bit encryption
                    ' for Des-192 the key must be 24 bytes long
                    ' for Des-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Des encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Des encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Des_Demo
            {
                public static void Main(string[] args)
                {
                    Des Des = new Des();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Des.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Des.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Des.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Des_Demo
                Public Shared Sub Execute()
                    Dim Des As New Des()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Des.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Des.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Des.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Des.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     // 16 bytes long key for Des-128 bit encryption
                     // for Des-192 the key must be 24 bytes long
                     // for Des-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' 16 bytes long key for Des-128 bit encryption
                     ' for Des-192 the key must be 24 bytes long
                     ' for Des-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Des encrypted byte array
             </summary>
             <param name="encryptedData">Des encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Des_Demo
             {
                 public static void Main(string[] args)
                 {
                     Des Des = new Des();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Des.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Des.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Des.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Des_Demo
                 Public Shared Sub Execute()
                     Dim Des As New Des()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Des.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Des.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Des.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.TripleDes.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Des encrypted byte array
            </summary>
            <param name="encryptedData">Des encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Des.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.TripleDes.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.TripleDes.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.TripleDes.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.TripleDes.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Ciphers.Twofish">
            <summary>
            Provides Twofish encryption/decryption methods
            </summary>
            <remarks>
            Can use keys ranging from 4 bytes (32 bits) up to 32 bytes (256 bits)
            </remarks>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.GetMinKeySize">
            <summary>
            The minimal accepted by the algorithm key size in bytes
            </summary>
            <returns>the minimal accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.GetMaxKeySize">
            <summary>
            The maximum accepted by the algorithm key size in bytes
            </summary>
            <returns>the maximum accepted key size in bytes</returns>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptString(System.String,System.String)">
            <summary>
            Twofish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Twofish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptString(System.String,System.String,System.Byte[])">
            <summary>
            Twofish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="password">Password string that will be used as a key by converting it to bytes with the specified through <see cref="!:PasswordHashFunction"/> hash</param>
            <returns>the Base64/MIME encoded Twofish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Twofish.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Twofish.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptString(System.String,System.Byte[])">
            <summary>
            Twofish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the Base64/MIME encoded Twofish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Twofish encrypts a plain text String message into a Base64/MIME encoded encrypted string
            </summary>
            <remarks>
            The block mode used is the one specified with <see cref="!:Mode"/>
            <para>
            The padding mode used is the one specified with <see cref="N:NCiphers.Padding"/>
            </para>
            </remarks>
            <param name="message">input message to be encrypted</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            <returns>the Base64/MIME encoded Twofish encrypted string</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Twofish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Twofish encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), password);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), password)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Twofish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Twofish encrypted file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), password, IV);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), password, IV)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
            or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Twofish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Twofish encrypted file</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), key);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), key)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Twofish encrypts a file
            </summary>
            <param name="file">input file</param>
            <param name="toFile">output Twofish encrypted file</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), key);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), key, IV)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), key, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
            and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
            or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Twofish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
             <summary>
             Twofish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, key, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, key, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Twofish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Twofish encrypts a <see cref="T:System.IO.Stream"/>
             </summary>
             <param name="dataStream">input stream with data for encryption</param>
             <param name="encryptedStream">output stream where the encrypted data is written</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be 16 bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // a password that will be converted to byte array key using the hash function
                     // from Twofish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Twofish.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptBytes(System.Byte[],System.String)">
             <summary>
             Twofish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             <returns>the byte array Twofish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Twofish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Twofish.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Twofish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <returns>the byte array Twofish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Twofish encrypts a byte array
             </summary>
             <param name="data">byte array to be decrypted</param>
             <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
             <returns>the byte array Twofish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm, 
             or the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.EncryptBytes(System.Byte[],System.String,System.Byte[])">
             <summary>
             Twofish encrypts a byte array
             </summary>
             <param name="data">data to be Twofish encrypted</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
             <returns>the byte array Twofish encrypted</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // a password that will be converted to byte array key using the hash function
                     // from Twofish.PasswordHashFunction
                     string password = "my password";
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, password, IV);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, password, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Twofish.PasswordHashFunction
                     Dim password As String = "my password"
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, password, IV)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, password, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.DataException">when the padding is set to <see cref="F:NCiphers.Ciphers.CipherPaddingMode.NoPadding"/> 
             and the data is not aligned with the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm , 
             or if the IV doesn't match the <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/></exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted file
            </summary>
            <param name="file">Twofish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), key);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), key);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), key)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), key)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted file
            </summary>
            <param name="file">Twofish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String)">
            <summary>
            Decrypts an Twofish encrypted file
            </summary>
            <param name="file">Twofish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
                    
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), password);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), password);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), password)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), password)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted file
            </summary>
            <param name="file">Twofish encrypted input file</param>
            <param name="toFile">decrypted output file</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    // encrypting
                    Twofish.EncryptFile(new FileInfo(@"Data\SampleFile.txt"), new FileInfo(@"Data\SampleFile.Twofish"), password, IV);
                    
                    // decrypting
                    Twofish.DecryptFile(new FileInfo(@"Data\SampleFile.Twofish"), new FileInfo(@"Data\SampleFile.txt"), password, IV);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    ' encrypting
                    Twofish.EncryptFile(New FileInfo("Data\SampleFile.txt"), New FileInfo("Data\SampleFile.Twofish"), password, IV)
                    
                    ' decrypting
                    Twofish.DecryptFile(New FileInfo("Data\SampleFile.Twofish"), New FileInfo("Data\SampleFile2.txt"), password, IV)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[])">
             <summary>
             Decrypts an Twofish encrypted stream
             </summary>
             <param name="encryptedStream">Twofish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="key">Twofish key bytes</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptStream(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted stream
            </summary>
            <param name="encryptedStream">Twofish encrypted input stream</param>
            <param name="decryptedStream">decrypted output stream</param>
            <param name="key">Twofish key bytes</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
            <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)">
             <summary>
             Decrypts an Twofish encrypted stream
             </summary>
             <param name="encryptedStream">Twofish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, key);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, key);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
             
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, key)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, key)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptStream(System.IO.Stream,System.IO.Stream,System.String,System.Byte[])">
             <summary>
             Decrypts an Twofish encrypted stream
             </summary>
             <param name="encryptedStream">Twofish encrypted input stream</param>
             <param name="decryptedStream">decrypted output stream</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // a password that will be converted to byte array key using the hash function
                     // from Twofish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     using (Stream dataStream = File.OpenRead(@"Data\SampleFile.txt"))
                     using (Stream encryptedStream = File.Create(@"Data\SampleFile.Twofish"))
                     {
                       Twofish.EncryptStream(dataStream, encryptedStream, password, IV);
                     }
                     
                     using (Stream encryptedStream = File.OpenRead(@"Data\SampleFile.Twofish"))
                     using (Stream decryptedStream = new MemoryStream())
                     {
                         Twofish.DecryptStream(encryptedStream, decryptedStream, password, IV);
                         byte[] decryptedData = ((MemoryStream)decryptedStream).ToArray();
                         Console.WriteLine("Decrypted data: " + System.Text.Encoding.UTF8.GetString(decryptedData));
                     }
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Twofish.PasswordHashFunction
             
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Using dataStream As Stream = File.OpenRead("Data\SampleFile.txt")
                         Using encryptedStream As Stream = File.Create("Data\SampleFile.Twofish")
                             Twofish.EncryptStream(dataStream, encryptedStream, password, IV)
                         End Using
                     End Using
            
                     Using encryptedStream As Stream = File.OpenRead("Data\SampleFile.Twofish")
                         Using decryptedStream As Stream = New MemoryStream()
                             Twofish.DecryptStream(encryptedStream, decryptedStream, password, IV)
                             Dim decryptedData As Byte() = DirectCast(decryptedStream, MemoryStream).ToArray()
                             Console.WriteLine("Decrypted data: " & System.Text.Encoding.UTF8.GetString(decryptedData))
                         End Using
                     End Using
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
             <exception cref="T:System.IO.IOException">on I/O error</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Twofish encrypted and Base64/MIME converted string</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, key);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, key);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, key)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, key)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptString(System.String,System.Byte[],System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Twofish encrypted and Base64/MIME converted string</param>
            <param name="key">Twofish key as byte array. Must be 16, 24 or 32 bytes long</param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    // 16 bytes long key for Twofish-128 bit encryption
                    // for Twofish-192 the key must be 24 bytes long
                    // for Twofish-256 the key must be 32 bytes long
                    byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, key, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, key, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' 16 bytes long key for Twofish-128 bit encryption
                    ' for Twofish-192 the key must be 24 bytes long
                    ' for Twofish-256 the key must be 32 bytes long
                    Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                     236, 189, 51, 243, 244, 91, _
                     17, 136, 39, 230}
            
                    Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, key, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, key, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptString(System.String,System.String)">
            <summary>
            Decrypts an Twofish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Twofish encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
            
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, password);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, password);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, password)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, password)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptString(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts an Twofish encrypted and afterwards Base64/MIME converted string
            </summary>
            <param name="encryptedMessage">Twofish encrypted and Base64/MIME converted string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            <returns>the UTF-8 decrypted message</returns>
            
            <example>
            <code lang="C#"><![CDATA[
            using System;
            using System.IO;
            using NCiphers.Ciphers;
            
            class Twofish_Demo
            {
                public static void Main(string[] args)
                {
                    Twofish Twofish = new Twofish();
                    
                    // a password that will be converted to byte array key using the hash function
                    // from Twofish.PasswordHashFunction
                    string password = "my password";
            
                    // The Initialization Vector (IV) must be Twofish.BlockSize (16 bytes) long
                    byte[] IV = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                    
                    string message = "Hello World";
                    string encryptedMessage = Twofish.EncryptString(message, password, IV);
                    Console.WriteLine("Encrypted message: " + encryptedMessage);
            
                    string decryptedMessage = Twofish.DecryptString(encryptedMessage, password, IV);
                    Console.WriteLine("Decrypted message: " + decryptedMessage);
                }
            }
            ]]></code>
            <code lang="VB.NET"><![CDATA[
            Imports System
            Imports System.IO
            Imports NCiphers.Ciphers
            
            Class Twofish_Demo
                Public Shared Sub Execute()
                    Dim Twofish As New Twofish()
            
                    ' a password that will be converted to byte array key using the hash function
                    ' from Twofish.PasswordHashFunction
                    Dim password As String = "my password"
            
                    ' The Initialization Vector (IV) must be Twofish.BlockSize (16 bytes) long
                    Dim IV As Byte() = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230}
                    
                    Dim message As String = "Hello World"
                    Dim encryptedMessage As String = Twofish.EncryptString(message, password, IV)
                    Console.WriteLine("Encrypted message: " & encryptedMessage)
            
                    Dim decryptedMessage As String = Twofish.DecryptString(encryptedMessage, password, IV)
                    Console.WriteLine("Decrypted message: " & decryptedMessage)
                End Sub
            End Class
            ]]></code>
            </example>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptBytes(System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Twofish encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, key);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, key);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, key)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, key)
                 End Sub
             End Class
             ]]></code>
             </example>
            
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptBytes(System.Byte[],System.Byte[],System.Byte[])">
             <summary>
             Decrypts an Twofish encrypted byte array
             </summary>
             <param name="encryptedData">encrypted byte array</param>
             <param name="key">decryption key (same as the encryption key)</param>
             <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     // 16 bytes long key for Twofish-128 bit encryption
                     // for Twofish-192 the key must be 24 bytes long
                     // for Twofish-256 the key must be 32 bytes long
                     byte[] key = {50, 199, 10, 159, 132, 55, 236, 189, 51, 243, 244, 91, 17, 136, 39, 230};
                     byte[] IV = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, key, IV);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, key, IV);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' 16 bytes long key for Twofish-128 bit encryption
                     ' for Twofish-192 the key must be 24 bytes long
                     ' for Twofish-256 the key must be 32 bytes long
                     Dim key As Byte() = {50, 199, 10, 159, 132, 55, _
                      236, 189, 51, 243, 244, 91, _
                      17, 136, 39, 230}
                     Dim IV As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, key, IV)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, key, IV)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the key size doesn't match the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptBytes(System.Byte[],System.String)">
             <summary>
             decrypts an Twofish encrypted byte array
             </summary>
             <param name="encryptedData">Twofish encrypted and Base64/MIME encoded string</param>
             <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
             <returns>the decrypted byte array</returns>
             
             <example>
             <code lang="C#"><![CDATA[
             using System;
             using System.IO;
             using NCiphers.Ciphers;
             
             class Twofish_Demo
             {
                 public static void Main(string[] args)
                 {
                     Twofish Twofish = new Twofish();
                     
                     // a password that will be converted to byte array key using the hash function
                     // from Twofish.PasswordHashFunction
                     string password = "my password";
                     
                     byte[] data = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106};
             
                     byte[] encryptedBytes = Twofish.EncryptBytes(data, password);
            
                     byte[] decryptedBytes = Twofish.DecryptBytes(encryptedBytes, password);
                 }
             }
             ]]></code>
             <code lang="VB.NET"><![CDATA[
             Imports System
             Imports System.IO
             Imports NCiphers.Ciphers
             
             Class Twofish_Demo
                 Public Shared Sub Execute()
                     Dim Twofish As New Twofish()
             
                     ' a password that will be converted to byte array key using the hash function
                     ' from Twofish.PasswordHashFunction
                     Dim password As String = "my password"
                     
                     Dim data As Byte() = {150, 9, 112, 39, 32, 5, 136, 289, 251, 43, 44, 191, 217, 236, 3, 106}
             
                     Dim encryptedBytes As Byte() = Twofish.EncryptBytes(data, password)
                     Dim decryptedBytes As Byte() = Twofish.DecryptBytes(encryptedBytes, password)
                 End Sub
             End Class
             ]]></code>
             </example>
             
             <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
             <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
             <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="M:NCiphers.Ciphers.Twofish.DecryptBytes(System.Byte[],System.String,System.Byte[])">
            <summary>
            decrypts an Twofish encrypted byte array
            </summary>
            <param name="encryptedData">Twofish encrypted and Base64/MIME encoded string</param>
            <param name="password">a password that will be converted to key using the hash function <see cref="!:Twofish.PasswordHashFunction"/></param>
            <param name="IV">Initialization vector (IV) for the encryption. Must be <see cref="P:NCiphers.Ciphers.Twofish.BlockSize"/> bytes long.</param>
            <returns>the decrypted byte array</returns>
            
            <exception cref="T:NCiphers.Exceptions.CipherException">if the decryption key/password/ is wrong or the data was encrypted with different <see cref="T:NCiphers.Ciphers.CipherBlockMode"/> </exception>
            <exception cref="T:NCiphers.Exceptions.DataException">if the data is corrupted</exception>
            <exception cref="T:System.ArgumentException">If <see cref="P:NCiphers.Ciphers.Twofish.StrictKeys"/> is true and the output of the <see cref="!:PasswordHashFunction"/> doesn't match the key size(s) accepted by the algorithm</exception>
        </member>
        <member name="P:NCiphers.Ciphers.Twofish.StrictKeys">
            <summary>
            Gets/Sets how should keys with non aligned sized be treated
            </summary>
            <remarks>
            Default is true, which means that keys with sizes non matching the algorithm will throw <see cref="T:System.ArgumentException"/>.
            <para>
            When set to false, the class will fill the keys with 0, or shrink them to match the needed key length.
            </para>
            </remarks>
        </member>
        <member name="P:NCiphers.Ciphers.Twofish.BlockSize">
            <summary>
            Block size of this algorithm
            </summary>
            <remarks>
            <para>
            Can be used for constructing Initialization Vectors (IV)
            </para>
            </remarks>
        </member>
        <member name="T:NCiphers.Hashing.HashAlgorithms">
            <summary>
            Supported Hash algorithms
            </summary>
        </member>
        <member name="T:NCiphers.Hashing.HashTools">
            <summary>
            A utility class that exposes static methods for computing Hash functions
            </summary>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Digest(NCiphers.Hashing.HashAlgorithms,System.String)">
            <summary>
            Calculate digest from a string input
            </summary>
            <param name="hashFunction"><see cref="!:HashAlorithms"/> algorithm to be used for hash calculation</param>
            <param name="password">input strring (usually password) for which a hash digest will be calculated</param>
            <returns>digest from the input</returns>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Digest(NCiphers.Hashing.HashAlgorithms,System.Byte[])">
            <summary>
            Calculate digest from a byte[] array
            </summary>
            <param name="hashFunction"><see cref="!:HashAlorithms"/> algorithm to be used for hash calculation</param>
            <param name="input">input data (usually password) for which a hash digest will be calculated</param>
            <returns>digest from the input</returns>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5Hex(System.Byte[])">
            <summary>
            Computes the MD5 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which MD5 hash will be computed</param>
            <returns>hexadecimal string from the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.MD5Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.MD5Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5Hex(System.String)">
            <summary>
            Computes the MD5 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD5 hash will be computed</param>
            <returns>hexadecimal string from the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.MD5Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.MD5Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5Hex(System.IO.Stream)">
            <summary>
            Computes the MD5 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD5 hash will be computed</param>
            <returns>hexadecimal string from the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.MD5Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.MD5Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5Hex(System.IO.FileInfo)">
            <summary>
            Computes the MD5 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which MD5 hash will be computed</param>
            <returns>hexadecimal string from the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.MD5Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.MD5Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5(System.Byte[])">
            <summary>
            Computes the MD5 hash of a byte array
            </summary>
            <param name="data">byte array for which MD5 hash will be computed</param>
            <returns>the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.MD5(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.MD5(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5(System.String)">
            <summary>
            Computes the MD5 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD5 hash will be computed</param>
            <returns>the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.MD5(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.MD5(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5(System.IO.Stream)">
            <summary>
            Computes the MD5 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD5 hash will be computed</param>
            <returns>the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.MD5(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.MD5(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD5(System.IO.FileInfo)">
            <summary>
            Computes the MD5 hash of a file
            </summary>
            <param name="file">File for which MD5 hash will be computed</param>
            <returns>the MD5 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD5Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.MD5(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD5Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.MD5(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4Hex(System.Byte[])">
            <summary>
            Computes the MD4 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which MD4 hash will be computed</param>
            <returns>hexadecimal string from the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.MD4Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.MD4Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4Hex(System.String)">
            <summary>
            Computes the MD4 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD4 hash will be computed</param>
            <returns>hexadecimal string from the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.MD4Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.MD4Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4Hex(System.IO.Stream)">
            <summary>
            Computes the MD4 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD4 hash will be computed</param>
            <returns>hexadecimal string from the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.MD4Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.MD4Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4Hex(System.IO.FileInfo)">
            <summary>
            Computes the MD4 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which MD4 hash will be computed</param>
            <returns>hexadecimal string from the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.MD4Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.MD4Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4(System.Byte[])">
            <summary>
            Computes the MD4 hash of a byte array
            </summary>
            <param name="data">byte array for which MD4 hash will be computed</param>
            <returns>the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.MD4(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.MD4(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4(System.String)">
            <summary>
            Computes the MD4 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD4 hash will be computed</param>
            <returns>the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.MD4(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.MD4(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4(System.IO.Stream)">
            <summary>
            Computes the MD4 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD4 hash will be computed</param>
            <returns>the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.MD4(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.MD4(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD4(System.IO.FileInfo)">
            <summary>
            Computes the MD4 hash of a file
            </summary>
            <param name="file">File for which MD4 hash will be computed</param>
            <returns>the MD4 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD4Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.MD4(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD4Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.MD4(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2Hex(System.Byte[])">
            <summary>
            Computes the MD2 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which MD2 hash will be computed</param>
            <returns>hexadecimal string from the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.MD2Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.MD2Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2Hex(System.String)">
            <summary>
            Computes the MD2 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD2 hash will be computed</param>
            <returns>hexadecimal string from the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.MD2Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.MD2Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2Hex(System.IO.Stream)">
            <summary>
            Computes the MD2 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD2 hash will be computed</param>
            <returns>hexadecimal string from the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.MD2Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.MD2Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2Hex(System.IO.FileInfo)">
            <summary>
            Computes the MD2 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which MD2 hash will be computed</param>
            <returns>hexadecimal string from the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.MD2Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.MD2Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2(System.Byte[])">
            <summary>
            Computes the MD2 hash of a byte array
            </summary>
            <param name="data">byte array for which MD2 hash will be computed</param>
            <returns>the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.MD2(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.MD2(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2(System.String)">
            <summary>
            Computes the MD2 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which MD2 hash will be computed</param>
            <returns>the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.MD2(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.MD2(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2(System.IO.Stream)">
            <summary>
            Computes the MD2 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which MD2 hash will be computed</param>
            <returns>the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.MD2(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.MD2(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.MD2(System.IO.FileInfo)">
            <summary>
            Computes the MD2 hash of a file
            </summary>
            <param name="file">File for which MD2 hash will be computed</param>
            <returns>the MD2 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class MD2Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.MD2(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class MD2Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.MD2(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1Hex(System.Byte[])">
            <summary>
            Computes the Sha1 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Sha1 hash will be computed</param>
            <returns>hexadecimal string from the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Sha1Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Sha1Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1Hex(System.String)">
            <summary>
            Computes the Sha1 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha1 hash will be computed</param>
            <returns>hexadecimal string from the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Sha1Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Sha1Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1Hex(System.IO.Stream)">
            <summary>
            Computes the Sha1 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha1 hash will be computed</param>
            <returns>hexadecimal string from the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Sha1Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Sha1Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1Hex(System.IO.FileInfo)">
            <summary>
            Computes the Sha1 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Sha1 hash will be computed</param>
            <returns>hexadecimal string from the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Sha1Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Sha1Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1(System.Byte[])">
            <summary>
            Computes the Sha1 hash of a byte array
            </summary>
            <param name="data">byte array for which Sha1 hash will be computed</param>
            <returns>the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Sha1(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Sha1(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1(System.String)">
            <summary>
            Computes the Sha1 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha1 hash will be computed</param>
            <returns>the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Sha1(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Sha1(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1(System.IO.Stream)">
            <summary>
            Computes the Sha1 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha1 hash will be computed</param>
            <returns>the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Sha1(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Sha1(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha1(System.IO.FileInfo)">
            <summary>
            Computes the Sha1 hash of a file
            </summary>
            <param name="file">File for which Sha1 hash will be computed</param>
            <returns>the Sha1 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha1Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Sha1(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha1Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Sha1(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224Hex(System.Byte[])">
            <summary>
            Computes the Sha224 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Sha224 hash will be computed</param>
            <returns>hexadecimal string from the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Sha224Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Sha224Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224Hex(System.String)">
            <summary>
            Computes the Sha224 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha224 hash will be computed</param>
            <returns>hexadecimal string from the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Sha224Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Sha224Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224Hex(System.IO.Stream)">
            <summary>
            Computes the Sha224 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha224 hash will be computed</param>
            <returns>hexadecimal string from the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Sha224Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Sha224Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224Hex(System.IO.FileInfo)">
            <summary>
            Computes the Sha224 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Sha224 hash will be computed</param>
            <returns>hexadecimal string from the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Sha224Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Sha224Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224(System.Byte[])">
            <summary>
            Computes the Sha224 hash of a byte array
            </summary>
            <param name="data">byte array for which Sha224 hash will be computed</param>
            <returns>the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Sha224(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Sha224(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224(System.String)">
            <summary>
            Computes the Sha224 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha224 hash will be computed</param>
            <returns>the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Sha224(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Sha224(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224(System.IO.Stream)">
            <summary>
            Computes the Sha224 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha224 hash will be computed</param>
            <returns>the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Sha224(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Sha224(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha224(System.IO.FileInfo)">
            <summary>
            Computes the Sha224 hash of a file
            </summary>
            <param name="file">File for which Sha224 hash will be computed</param>
            <returns>the Sha224 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha224Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Sha224(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha224Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Sha224(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256Hex(System.Byte[])">
            <summary>
            Computes the Sha256 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Sha256 hash will be computed</param>
            <returns>hexadecimal string from the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Sha256Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Sha256Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256Hex(System.String)">
            <summary>
            Computes the Sha256 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha256 hash will be computed</param>
            <returns>hexadecimal string from the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Sha256Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Sha256Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256Hex(System.IO.Stream)">
            <summary>
            Computes the Sha256 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha256 hash will be computed</param>
            <returns>hexadecimal string from the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Sha256Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Sha256Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256Hex(System.IO.FileInfo)">
            <summary>
            Computes the Sha256 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Sha256 hash will be computed</param>
            <returns>hexadecimal string from the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Sha256Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Sha256Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256(System.Byte[])">
            <summary>
            Computes the Sha256 hash of a byte array
            </summary>
            <param name="data">byte array for which Sha256 hash will be computed</param>
            <returns>the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Sha256(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Sha256(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256(System.String)">
            <summary>
            Computes the Sha256 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha256 hash will be computed</param>
            <returns>the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Sha256(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Sha256(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256(System.IO.Stream)">
            <summary>
            Computes the Sha256 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha256 hash will be computed</param>
            <returns>the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Sha256(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Sha256(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha256(System.IO.FileInfo)">
            <summary>
            Computes the Sha256 hash of a file
            </summary>
            <param name="file">File for which Sha256 hash will be computed</param>
            <returns>the Sha256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha256Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Sha256(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha256Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Sha256(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384Hex(System.Byte[])">
            <summary>
            Computes the Sha384 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Sha384 hash will be computed</param>
            <returns>hexadecimal string from the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Sha384Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Sha384Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384Hex(System.String)">
            <summary>
            Computes the Sha384 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha384 hash will be computed</param>
            <returns>hexadecimal string from the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Sha384Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Sha384Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384Hex(System.IO.Stream)">
            <summary>
            Computes the Sha384 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha384 hash will be computed</param>
            <returns>hexadecimal string from the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Sha384Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Sha384Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384Hex(System.IO.FileInfo)">
            <summary>
            Computes the Sha384 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Sha384 hash will be computed</param>
            <returns>hexadecimal string from the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Sha384Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Sha384Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384(System.Byte[])">
            <summary>
            Computes the Sha384 hash of a byte array
            </summary>
            <param name="data">byte array for which Sha384 hash will be computed</param>
            <returns>the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Sha384(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Sha384(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384(System.String)">
            <summary>
            Computes the Sha384 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha384 hash will be computed</param>
            <returns>the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Sha384(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Sha384(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384(System.IO.Stream)">
            <summary>
            Computes the Sha384 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha384 hash will be computed</param>
            <returns>the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Sha384(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Sha384(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha384(System.IO.FileInfo)">
            <summary>
            Computes the Sha384 hash of a file
            </summary>
            <param name="file">File for which Sha384 hash will be computed</param>
            <returns>the Sha384 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha384Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Sha384(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha384Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Sha384(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512Hex(System.Byte[])">
            <summary>
            Computes the Sha512 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Sha512 hash will be computed</param>
            <returns>hexadecimal string from the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Sha512Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Sha512Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512Hex(System.String)">
            <summary>
            Computes the Sha512 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha512 hash will be computed</param>
            <returns>hexadecimal string from the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Sha512Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Sha512Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512Hex(System.IO.Stream)">
            <summary>
            Computes the Sha512 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha512 hash will be computed</param>
            <returns>hexadecimal string from the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Sha512Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Sha512Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512Hex(System.IO.FileInfo)">
            <summary>
            Computes the Sha512 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Sha512 hash will be computed</param>
            <returns>hexadecimal string from the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Sha512Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Sha512Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512(System.Byte[])">
            <summary>
            Computes the Sha512 hash of a byte array
            </summary>
            <param name="data">byte array for which Sha512 hash will be computed</param>
            <returns>the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Sha512(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Sha512(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512(System.String)">
            <summary>
            Computes the Sha512 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Sha512 hash will be computed</param>
            <returns>the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Sha512(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Sha512(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512(System.IO.Stream)">
            <summary>
            Computes the Sha512 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Sha512 hash will be computed</param>
            <returns>the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Sha512(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Sha512(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Sha512(System.IO.FileInfo)">
            <summary>
            Computes the Sha512 hash of a file
            </summary>
            <param name="file">File for which Sha512 hash will be computed</param>
            <returns>the Sha512 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Sha512Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Sha512(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Sha512Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Sha512(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128Hex(System.Byte[])">
            <summary>
            Computes the RipeMD128 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which RipeMD128 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.RipeMD128Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.RipeMD128Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128Hex(System.String)">
            <summary>
            Computes the RipeMD128 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD128 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.RipeMD128Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.RipeMD128Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128Hex(System.IO.Stream)">
            <summary>
            Computes the RipeMD128 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD128 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.RipeMD128Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.RipeMD128Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128Hex(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD128 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which RipeMD128 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.RipeMD128Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.RipeMD128Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128(System.Byte[])">
            <summary>
            Computes the RipeMD128 hash of a byte array
            </summary>
            <param name="data">byte array for which RipeMD128 hash will be computed</param>
            <returns>the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.RipeMD128(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.RipeMD128(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128(System.String)">
            <summary>
            Computes the RipeMD128 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD128 hash will be computed</param>
            <returns>the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.RipeMD128(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.RipeMD128(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128(System.IO.Stream)">
            <summary>
            Computes the RipeMD128 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD128 hash will be computed</param>
            <returns>the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.RipeMD128(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.RipeMD128(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD128(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD128 hash of a file
            </summary>
            <param name="file">File for which RipeMD128 hash will be computed</param>
            <returns>the RipeMD128 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD128Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.RipeMD128(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD128Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.RipeMD128(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160Hex(System.Byte[])">
            <summary>
            Computes the RipeMD160 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which RipeMD160 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.RipeMD160Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.RipeMD160Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160Hex(System.String)">
            <summary>
            Computes the RipeMD160 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD160 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.RipeMD160Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.RipeMD160Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160Hex(System.IO.Stream)">
            <summary>
            Computes the RipeMD160 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD160 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.RipeMD160Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.RipeMD160Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160Hex(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD160 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which RipeMD160 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.RipeMD160Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.RipeMD160Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160(System.Byte[])">
            <summary>
            Computes the RipeMD160 hash of a byte array
            </summary>
            <param name="data">byte array for which RipeMD160 hash will be computed</param>
            <returns>the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.RipeMD160(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.RipeMD160(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160(System.String)">
            <summary>
            Computes the RipeMD160 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD160 hash will be computed</param>
            <returns>the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.RipeMD160(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.RipeMD160(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160(System.IO.Stream)">
            <summary>
            Computes the RipeMD160 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD160 hash will be computed</param>
            <returns>the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.RipeMD160(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.RipeMD160(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD160(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD160 hash of a file
            </summary>
            <param name="file">File for which RipeMD160 hash will be computed</param>
            <returns>the RipeMD160 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD160Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.RipeMD160(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD160Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.RipeMD160(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256Hex(System.Byte[])">
            <summary>
            Computes the RipeMD256 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which RipeMD256 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.RipeMD256Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.RipeMD256Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256Hex(System.String)">
            <summary>
            Computes the RipeMD256 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD256 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.RipeMD256Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.RipeMD256Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256Hex(System.IO.Stream)">
            <summary>
            Computes the RipeMD256 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD256 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.RipeMD256Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.RipeMD256Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256Hex(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD256 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which RipeMD256 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.RipeMD256Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.RipeMD256Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256(System.Byte[])">
            <summary>
            Computes the RipeMD256 hash of a byte array
            </summary>
            <param name="data">byte array for which RipeMD256 hash will be computed</param>
            <returns>the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.RipeMD256(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.RipeMD256(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256(System.String)">
            <summary>
            Computes the RipeMD256 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD256 hash will be computed</param>
            <returns>the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.RipeMD256(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.RipeMD256(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256(System.IO.Stream)">
            <summary>
            Computes the RipeMD256 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD256 hash will be computed</param>
            <returns>the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.RipeMD256(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.RipeMD256(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD256(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD256 hash of a file
            </summary>
            <param name="file">File for which RipeMD256 hash will be computed</param>
            <returns>the RipeMD256 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD256Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.RipeMD256(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD256Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.RipeMD256(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320Hex(System.Byte[])">
            <summary>
            Computes the RipeMD320 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which RipeMD320 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.RipeMD320Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.RipeMD320Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320Hex(System.String)">
            <summary>
            Computes the RipeMD320 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD320 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.RipeMD320Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.RipeMD320Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320Hex(System.IO.Stream)">
            <summary>
            Computes the RipeMD320 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD320 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.RipeMD320Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.RipeMD320Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320Hex(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD320 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which RipeMD320 hash will be computed</param>
            <returns>hexadecimal string from the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.RipeMD320Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.RipeMD320Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320(System.Byte[])">
            <summary>
            Computes the RipeMD320 hash of a byte array
            </summary>
            <param name="data">byte array for which RipeMD320 hash will be computed</param>
            <returns>the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.RipeMD320(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.RipeMD320(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320(System.String)">
            <summary>
            Computes the RipeMD320 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which RipeMD320 hash will be computed</param>
            <returns>the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.RipeMD320(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.RipeMD320(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320(System.IO.Stream)">
            <summary>
            Computes the RipeMD320 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which RipeMD320 hash will be computed</param>
            <returns>the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.RipeMD320(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.RipeMD320(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.RipeMD320(System.IO.FileInfo)">
            <summary>
            Computes the RipeMD320 hash of a file
            </summary>
            <param name="file">File for which RipeMD320 hash will be computed</param>
            <returns>the RipeMD320 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class RipeMD320Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.RipeMD320(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class RipeMD320Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.RipeMD320(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.TigerHex(System.Byte[])">
            <summary>
            Computes the Tiger hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Tiger hash will be computed</param>
            <returns>hexadecimal string from the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.TigerHex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.TigerHex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.TigerHex(System.String)">
            <summary>
            Computes the Tiger hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Tiger hash will be computed</param>
            <returns>hexadecimal string from the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.TigerHex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.TigerHex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.TigerHex(System.IO.Stream)">
            <summary>
            Computes the Tiger hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Tiger hash will be computed</param>
            <returns>hexadecimal string from the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.TigerHex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.TigerHex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.TigerHex(System.IO.FileInfo)">
            <summary>
            Computes the Tiger hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Tiger hash will be computed</param>
            <returns>hexadecimal string from the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.TigerHex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.TigerHex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Tiger(System.Byte[])">
            <summary>
            Computes the Tiger hash of a byte array
            </summary>
            <param name="data">byte array for which Tiger hash will be computed</param>
            <returns>the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Tiger(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Tiger(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Tiger(System.String)">
            <summary>
            Computes the Tiger hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Tiger hash will be computed</param>
            <returns>the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Tiger(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Tiger(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Tiger(System.IO.Stream)">
            <summary>
            Computes the Tiger hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Tiger hash will be computed</param>
            <returns>the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Tiger(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Tiger(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Tiger(System.IO.FileInfo)">
            <summary>
            Computes the Tiger hash of a file
            </summary>
            <param name="file">File for which Tiger hash will be computed</param>
            <returns>the Tiger hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class TigerDemo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Tiger(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class TigerDemo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Tiger(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.WhirlpoolHex(System.Byte[])">
            <summary>
            Computes the Whirlpool hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Whirlpool hash will be computed</param>
            <returns>hexadecimal string from the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.WhirlpoolHex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.WhirlpoolHex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.WhirlpoolHex(System.String)">
            <summary>
            Computes the Whirlpool hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Whirlpool hash will be computed</param>
            <returns>hexadecimal string from the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.WhirlpoolHex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.WhirlpoolHex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.WhirlpoolHex(System.IO.Stream)">
            <summary>
            Computes the Whirlpool hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Whirlpool hash will be computed</param>
            <returns>hexadecimal string from the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.WhirlpoolHex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.WhirlpoolHex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.WhirlpoolHex(System.IO.FileInfo)">
            <summary>
            Computes the Whirlpool hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Whirlpool hash will be computed</param>
            <returns>hexadecimal string from the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.WhirlpoolHex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.WhirlpoolHex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Whirlpool(System.Byte[])">
            <summary>
            Computes the Whirlpool hash of a byte array
            </summary>
            <param name="data">byte array for which Whirlpool hash will be computed</param>
            <returns>the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Whirlpool(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Whirlpool(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Whirlpool(System.String)">
            <summary>
            Computes the Whirlpool hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Whirlpool hash will be computed</param>
            <returns>the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Whirlpool(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Whirlpool(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Whirlpool(System.IO.Stream)">
            <summary>
            Computes the Whirlpool hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Whirlpool hash will be computed</param>
            <returns>the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Whirlpool(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Whirlpool(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.Whirlpool(System.IO.FileInfo)">
            <summary>
            Computes the Whirlpool hash of a file
            </summary>
            <param name="file">File for which Whirlpool hash will be computed</param>
            <returns>the Whirlpool hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class WhirlpoolDemo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Whirlpool(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class WhirlpoolDemo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Whirlpool(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOSTHex(System.Byte[])">
            <summary>
            Computes the GOST R 34.11-94 hash of a byte array as a hexadecimal string
            </summary>
            <param name="data">byte array for which Gost3411 hash will be computed</param>
            <returns>hexadecimal string from the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.Gost3411Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.Gost3411Hex(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOSTHex(System.String)">
            <summary>
            Computes the GOST R 34.11-94 hash of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Gost3411 hash will be computed</param>
            <returns>hexadecimal string from the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.Gost3411Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.Gost3411Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOSTHex(System.IO.Stream)">
            <summary>
            Computes the GOST R 34.11-94 hash of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Gost3411 hash will be computed</param>
            <returns>hexadecimal string from the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.Gost3411Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.Gost3411Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOSTHex(System.IO.FileInfo)">
            <summary>
            Computes the GOST R 34.11-94 hash of a file as a hexadecimal string
            </summary>
            <param name="file">File for which Gost3411 hash will be computed</param>
            <returns>hexadecimal string from the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.Gost3411Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.Gost3411Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOST(System.Byte[])">
            <summary>
            Computes the GOST R 34.11-94 hash of a byte array
            </summary>
            <param name="data">byte array for which Gost3411 hash will be computed</param>
            <returns>the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		byte[] hashCode = HashTools.Gost3411(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Byte() = HashTools.Gost3411(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOST(System.String)">
            <summary>
            Computes the GOST R 34.11-94 hash of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which Gost3411 hash will be computed</param>
            <returns>the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		byte[] hashCode = HashTools.Gost3411(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim hashCode As Byte() = HashTools.Gost3411(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOST(System.IO.Stream)">
            <summary>
            Computes the GOST R 34.11-94 hash of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which Gost3411 hash will be computed</param>
            <returns>the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		byte[] hashCode = HashTools.Gost3411(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim hashCode As Byte() = HashTools.Gost3411(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.GOST(System.IO.FileInfo)">
            <summary>
            Computes the GOST R 34.11-94 hash of a file
            </summary>
            <param name="file">File for which Gost3411 hash will be computed</param>
            <returns>the GOST R 34.11-94 hash</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class Gost3411Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		byte[] hashCode = HashTools.Gost3411(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class Gost3411Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim hashCode As Byte() = HashTools.Gost3411(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32(System.Byte[])">
            <summary>
            Computes the CRC32 code of a byte array
            </summary>
            <param name="data">data bytes</param>
            <returns>the CRC32 value</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		long crc = HashTools.CRC32(binaryData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim hashCode As Long = HashTools.CRC32(binaryData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32(System.String)">
            <summary>
            Computes the CRC32 code of a <see cref="T:System.String"/>
            </summary>
            <param name="data"><see cref="T:System.String"/> for which CRC32 will be computed</param>
            <returns>the CRC32 code</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		long crc32 = HashTools.CRC32(stringData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Dim crc As Long = HashTools.CRC32(stringData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32(System.IO.Stream)">
            <summary>
            Computes the CRC32 code of a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which CRC32 will be computed</param>
            <returns>the CRC32 code</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		long crc32 = HashTools.CRC32(streamData);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Dim crc As Long = HashTools.CRC32(streamData)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32(System.IO.FileInfo)">
            <summary>
            Computes the CRC32 code of a file
            </summary>
            <param name="file">File for which CRC32 will be computed</param>
            <returns>the CRC32</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		long crc32 = HashTools.CRC32(file);
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Dim crc32 As Long = HashTools.CRC32(file)
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32Hex(System.Byte[])">
            <summary>
            Computes the CRC32 code of a byte array as a hexadecimal string
            </summary>
            <param name="data">data bytes</param>
            <returns>the CRC32 value as a hexadecimal string</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
            		Console.WriteLine(HashTools.CRC32Hex(binaryData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Console.WriteLine(HashTools.CRC32(binaryData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32Hex(System.String)">
            <summary>
            Computes the CRC32 code of a <see cref="T:System.String"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.String"/> for which CRC32 will be computed</param>
            <returns>the CRC32 code as a hexadecimal string</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    string stringData = "Hello World";
            		Console.WriteLine(HashTools.CRC32Hex(stringData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim stringData As String = "Hello World"
                    Console.WriteLine(HashTools.CRC32Hex(stringData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32Hex(System.IO.Stream)">
            <summary>
            Computes the CRC32 code of a <see cref="T:System.IO.Stream"/> as a hexadecimal string
            </summary>
            <param name="data"><see cref="T:System.IO.Stream"/> for which CRC32 will be computed</param>
            <returns>the CRC32 code as a hexadecimal string</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
                    byte[] binaryData = { 1, 2, 3, 4, 5, 6 };
                    Stream streamData = new MemoryStream(binaryData);
            		Console.WriteLine(HashTools.CRC32Hex(streamData));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim binaryData As Byte() = {1, 2, 3, 4, 5, 6}
                    Dim streamData As Stream = New MemoryStream(binaryData)
                    Console.WriteLine(HashTools.CRC32Hex(streamData))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Hashing.HashTools.CRC32Hex(System.IO.FileInfo)">
            <summary>
            Computes the CRC32 code of a file as a hexadecimal string
            </summary>
            <param name="file">File for which CRC32 will be computed</param>
            <returns>the CRC32 as a hexadecimal string</returns>
            
            <example>
            <code language="C#">
            using System;
            using System.IO;
            using NCiphers.Hashing;
            
            class CRC32Demo
            {
            	public static void Execute()
            	{
            		FileInfo file = new FileInfo(@"Data\SampleFile.txt");
            		Console.WriteLine(HashTools.CRC32Hex(file));
            	}
            }
            </code>
            <code language="VB.NET">
            Imports System
            Imports System.IO
            Imports NCiphers.Hashing
            
            Class CRC32Demo
                Public Shared Sub Execute()
                    Dim file As New FileInfo("Data\SampleFile.txt")
                    Console.WriteLine(HashTools.CRC32Hex(file))
                End Sub
            End Class
            </code>
            </example>
        </member>
        <member name="M:NCiphers.Padding.CustomSymbolPadding.Init(DidX.BouncyCastle.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:NCiphers.Padding.CustomSymbolPadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:NCiphers.Padding.CustomSymbolPadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:NCiphers.Padding.CustomSymbolPadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="T:NCiphers.Exceptions.CipherException">
            <summary>
            Exception that indicates that either the symmetric key is mistaken 
            or the decryption block mode is not the one used when encrypting
            </summary>
        </member>
        <member name="M:NCiphers.Exceptions.CipherException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:NCiphers.Exceptions.CipherException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="T:NCiphers.Exceptions.DataException">
            <summary>
            Exception when the decrypted data was corrupted 
            or if encrypting with <see cref="!:NCiphers.Ciphers.CipherPaddingMode.NoPoadding"/> the data is not block aligned
            </summary>
        </member>
        <member name="M:NCiphers.Exceptions.DataException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:NCiphers.Exceptions.DataException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NCiphers.Util.BaseLib.#cctor">
            <summary>
            Creates new instance of the library
            </summary> 
        </member>
        <member name="M:NCiphers.Util.DSBytePadding.Init(DidX.BouncyCastle.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:NCiphers.Util.DSBytePadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:NCiphers.Util.DSBytePadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:NCiphers.Util.DSBytePadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.#ctor(DidX.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.Init(System.Boolean,DidX.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:NCiphers.Util.Cfb1BlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:NCiphers.Util.Cfb1BlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="F:NCiphers.Util.CRC2.crc">
            The crc data checksum so far. 
        </member>
        <member name="F:NCiphers.Util.CRC2.crc_table">
            The fast CRC table. Computed once when the CRC32 class is loaded. 
        </member>
        <member name="M:NCiphers.Util.CRC2.make_crc_table">
            Make the table for a fast CRC. 
        </member>
        <member name="M:NCiphers.Util.CRC2.GetValue">
            Returns the CRC32 data checksum computed so far.
        </member>
        <member name="M:NCiphers.Util.CRC2.reset">
            Resets the CRC32 data checksum as if no update was ever called.
        </member>
        <member name="M:NCiphers.Util.CRC2.Update(System.UInt32)">
             Updates the checksum with the int bval. 
            
             @param bval (the byte is taken as the lower 8 bits of bval)
        </member>
        <member name="M:NCiphers.Util.CRC2.update(System.Byte[],System.Int32,System.Int32)">
             Adds the byte array to the data checksum.
            
             @param buf the buffer which contains the data
             @param off the offset in the buffer where the data starts
             @param len the length of the data
        </member>
        <member name="M:NCiphers.Util.CRC2.update(System.Byte[])">
            Adds the complete byte array to the data checksum.
        </member>
        <member name="T:NCiphers.Util.CRC32">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="M:NCiphers.Util.Hex.Decode(System.String)">
            <summary>
            Decodes a hex string into a byte array
            </summary>
            <param name="data">hex string encoded byte array</param>
            <returns></returns>
        </member>
        <member name="M:NCiphers.Util.Hex.Encode(System.Byte[])">
            <summary>
            Encodes as Hex string
            </summary>
            <param name="data">data to be encoded</param>
            <returns>Hex string</returns>
        </member>
    </members>
</doc>
